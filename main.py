import asyncio
import json
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ Secrets
OWNER_ID = 7322925570  # —Ç–≤–æ–π –∞–π–¥–∏

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

DATA_FILE = "data.json"

# üìÇ –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"chats": [], "interval_min": 5, "message": "–ü—Ä–∏–≤–µ—Ç!", "running": False}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

data = load_data()

# üìå –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
def owner_only(func):
    async def wrapper(message: Message, *args, **kwargs):
        if message.from_user.id != OWNER_ID:
            return
        return await func(message, *args, **kwargs)
    return wrapper

# üöÄ –†–∞—Å—Å—ã–ª–∫–∞
async def sender():
    while data.get("running"):
        for chat in data["chats"]:
            try:
                await bot.send_message(
                    chat["chat_id"], data["message"], message_thread_id=chat.get("topic_id")
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat}: {e}")
        await asyncio.sleep(data["interval_min"] * 60)

sender_task = None

async def start_sender():
    global sender_task
    if sender_task is None or sender_task.done():
        sender_task = asyncio.create_task(sender())

async def stop_sender():
    global sender_task
    if sender_task and not sender_task.done():
        sender_task.cancel()
        try:
            await sender_task
        except asyncio.CancelledError:
            pass
    sender_task = None

# üìå –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
@owner_only
async def cmd_start(message: Message):
    await message.reply("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@dp.message(Command("help"))
@owner_only
async def cmd_help(message: Message):
    await message.reply(
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/addchat <chat_id> [topic_id] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç/—Ç–µ–º—É\n"
        "/addhere ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç (–∏ —Ç–µ–º—É –µ—Å–ª–∏ –µ—Å—Ç—å)\n"
        "/delchat <chat_id> [topic_id] ‚Äî —É–¥–∞–ª–∏—Ç—å —á–∞—Ç/—Ç–µ–º—É\n"
        "/delhere ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç (–∏ —Ç–µ–º—É –µ—Å–ª–∏ –µ—Å—Ç—å)\n"
        "/listchats ‚Äî —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n"
        "/setinterval <–º–∏–Ω> ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª (1-60)\n"
        "/setmessage <—Ç–µ–∫—Å—Ç> ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "/startspam ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "/stopspam ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "/getid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞ –∏ —Ç–µ–º—ã"
    )

@dp.message(Command("getid"))
@owner_only
async def cmd_getid(message: Message):
    chat_id = message.chat.id
    thread_id = getattr(message, "message_thread_id", None)
    if thread_id:
        await message.reply(f"üìå Chat ID: `{chat_id}`\nüßµ Topic ID: `{thread_id}`", parse_mode="Markdown")
    else:
        await message.reply(f"üìå Chat ID: `{chat_id}`\n(–±–µ–∑ —Ç–æ–ø–∏–∫–∞)", parse_mode="Markdown")

@dp.message(Command("addchat"))
@owner_only
async def cmd_addchat(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        return await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addchat <chat_id> [topic_id]")
    chat_id = int(parts[1])
    topic_id = int(parts[2]) if len(parts) > 2 else None
    chat = {"chat_id": chat_id}
    if topic_id:
        chat["topic_id"] = topic_id
    if chat not in data["chats"]:
        data["chats"].append(chat)
        save_data(data)
        await message.reply("‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.reply("‚ö†Ô∏è –¢–∞–∫–æ–π —á–∞—Ç —É–∂–µ –µ—Å—Ç—å.")

@dp.message(Command("addhere"))
@owner_only
async def cmd_addhere(message: Message):
    chat_id = message.chat.id
    thread_id = getattr(message, "message_thread_id", None)
    chat = {"chat_id": chat_id}
    if thread_id:
        chat["topic_id"] = thread_id
    if chat not in data["chats"]:
        data["chats"].append(chat)
        save_data(data)
        await message.reply("‚úÖ –¢–µ–∫—É—â–∏–π —á–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å.")

@dp.message(Command("delchat"))
@owner_only
async def cmd_delchat(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        return await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delchat <chat_id> [topic_id]")
    chat_id = int(parts[1])
    topic_id = int(parts[2]) if len(parts) > 2 else None
    before = len(data["chats"])
    data["chats"] = [c for c in data["chats"] if not (c["chat_id"] == chat_id and c.get("topic_id") == topic_id)]
    after = len(data["chats"])
    save_data(data)
    if before != after:
        await message.reply("‚úÖ –ß–∞—Ç —É–¥–∞–ª—ë–Ω.")
    else:
        await message.reply("‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(Command("delhere"))
@owner_only
async def cmd_delhere(message: Message):
    chat_id = message.chat.id
    thread_id = getattr(message, "message_thread_id", None)
    before = len(data["chats"])
    data["chats"] = [c for c in data["chats"] if not (c["chat_id"] == chat_id and c.get("topic_id") == thread_id)]
    after = len(data["chats"])
    save_data(data)
    if before != after:
        await message.reply("‚úÖ –¢–µ–∫—É—â–∏–π —á–∞—Ç —É–¥–∞–ª—ë–Ω.")
    else:
        await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(Command("listchats"))
@owner_only
async def cmd_listchats(message: Message):
    if not data["chats"]:
        return await message.reply("üì≠ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç.")
    text = "üìå –ß–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
    for c in data["chats"]:
        text += f"- {c['chat_id']}"
        if "topic_id" in c:
            text += f" (topic {c['topic_id']})"
        text += "\n"
    await message.reply(text)

@dp.message(Command("setinterval"))
@owner_only
async def cmd_setinterval(message: Message):
    args = message.text.replace("/setinterval", "", 1).strip()
    try:
        m = int(args)
        if not (1 <= m <= 60):
            raise ValueError
    except Exception:
        return await message.reply("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 60.")
    data["interval_min"] = m
    save_data(data)
    await stop_sender()
    if data.get("running"):
        await start_sender()
    await message.reply(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {m} –º–∏–Ω.")

@dp.message(Command("setmessage"))
@owner_only
async def cmd_setmessage(message: Message):
    args = message.text.replace("/setmessage", "", 1).strip()
    if not args:
        return await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setmessage <—Ç–µ–∫—Å—Ç>")
    data["message"] = args
    save_data(data)
    await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

@dp.message(Command("startspam"))
@owner_only
async def cmd_startspam(message: Message):
    data["running"] = True
    save_data(data)
    await start_sender()
    await message.reply("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

@dp.message(Command("stopspam"))
@owner_only
async def cmd_stopspam(message: Message):
    data["running"] = False
    save_data(data)
    await stop_sender()
    await message.reply("‚õî –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# üîÑ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
